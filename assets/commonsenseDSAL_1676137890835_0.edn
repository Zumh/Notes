{:highlights [{:id #uuid "63f77bad-7c27-4cc7-8563-33b8290781c9", :page 22, :position {:bounding {:x1 116.65625, :y1 319.03125, :x2 293.95068359375, :y2 335.03125, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 319.03125, :x2 293.95068359375, :y2 335.03125, :width 700, :height 840}), :page 22}, :content {:text "does the code actually work?"}, :properties {:color "yellow"}} {:id #uuid "63f77bd5-4fb0-458b-a636-ca7451e0c99f", :page 22, :position {:bounding {:x1 0, :y1 190, :x2 583.4563598632812, :y2 516.796875, :width 700, :height 840}, :rects ({:x1 0, :y1 190, :x2 0, :y2 210, :width 700, :height 840} {:x1 536.9375, :y1 483.1875, :x2 583.4563598632812, :y2 499.1875, :width 700, :height 840} {:x1 116.65625, :y1 500.796875, :x2 130.2362518310547, :y2 516.796875, :width 700, :height 840}), :page 22}, :content {:text "efficiency"}, :properties {:color "yellow"}} {:id #uuid "63f77bf5-2f47-4174-93b7-fb9454a6627a", :page 22, :position {:bounding {:x1 324.14837646484375, :y1 483.1875, :x2 429.47222900390625, :y2 499.1875, :width 700, :height 840}, :rects ({:x1 324.14837646484375, :y1 483.1875, :x2 429.47222900390625, :y2 499.1875, :width 700, :height 840}), :page 22}, :content {:text " high-quality code"}, :properties {:color "yellow"}} {:id #uuid "63f77bfb-e1d9-4bd7-9a99-d3255f120baa", :page 22, :position {:bounding {:x1 251.8875732421875, :y1 440.203125, :x2 343.8891906738281, :y2 456.203125, :width 700, :height 840}, :rects ({:x1 251.8875732421875, :y1 440.203125, :x2 343.8891906738281, :y2 456.203125, :width 700, :height 840}), :page 22}, :content {:text "Maintainability"}, :properties {:color "yellow"}} {:id #uuid "63f77bfd-4bc7-445c-955c-087f06108fcb", :page 22, :position {:bounding {:x1 116.65625, :y1 457.8125, :x2 450.7030944824219, :y2 473.8125, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 457.8125, :x2 450.7030944824219, :y2 473.8125, :width 700, :height 840}), :page 22}, :content {:text "readability, organization, and modularity of one’s code"}, :properties {:color "yellow"}} {:id #uuid "63f77c2d-f65d-4c6d-b3dd-bf8c49e3e4d3", :page 23, :position {:bounding {:x1 116.65625, :y1 520.28125, :x2 395.8356018066406, :y2 536.28125, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 520.28125, :x2 395.8356018066406, :y2 536.28125, :width 700, :height 840}), :page 23}, :content {:text "Data structures refer to how data is organized"}, :properties {:color "yellow"}} {:id #uuid "63f77c53-c827-4074-8c55-c0de79192419", :page 24, :position {:bounding {:x1 0, :y1 78, :x2 583.5154418945312, :y2 210.1875, :width 700, :height 840}, :rects ({:x1 0, :y1 78, :x2 0, :y2 98, :width 700, :height 840} {:x1 150.9375, :y1 176.59375, :x2 583.5154418945312, :y2 192.59375, :width 700, :height 840} {:x1 116.65625, :y1 194.1875, :x2 383.48760986328125, :y2 210.1875, :width 700, :height 840}), :page 24}, :content {:text "Depending on how you choose to organize your data, your program may run faster or slower by orders of magnitude."}, :properties {:color "yellow"}} {:id #uuid "63f77c6d-e56d-4cc8-a1e2-d086dbf9b761", :page 24, :position {:bounding {:x1 0, :y1 110, :x2 583.50439453125, :y2 263, :width 700, :height 840}, :rects ({:x1 0, :y1 110, :x2 0, :y2 130, :width 700, :height 840} {:x1 0, :y1 126, :x2 0, :y2 146, :width 700, :height 840} {:x1 463.42816162109375, :y1 211.796875, :x2 583.50439453125, :y2 227.796875, :width 700, :height 840} {:x1 116.65625, :y1 229.390625, :x2 583.3229370117188, :y2 245.390625, :width 700, :height 840} {:x1 116.65625, :y1 247, :x2 547.2009887695312, :y2 263, :width 700, :height 840}), :page 24}, :content {:text "thousands of people simultaneously, the data structures you select may affect whether your software runs at all, or simply conks out because it can’t handle the load."}, :properties {:color "yellow"}} {:id #uuid "63f77c86-9047-4506-b8c2-8352d3417e45", :page 24, :position {:bounding {:x1 116.65625, :y1 412.953125, :x2 480.2352294921875, :y2 434.953125, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 412.953125, :x2 480.2352294921875, :y2 434.953125, :width 700, :height 840}), :page 24}, :content {:text "The Array: The Foundational Data Structure"}, :properties {:color "yellow"}} {:id #uuid "63f77cc6-574c-463e-939c-e9fb76ca8cb1", :page 25, :position {:bounding {:x1 140, :y1 364.203125, :x2 179.203125, :y2 380.203125, :width 700, :height 840}, :rects ({:x1 140, :y1 364.203125, :x2 179.203125, :y2 380.203125, :width 700, :height 840}), :page 25}, :content {:text "Read: "}, :properties {:color "yellow"}} {:id #uuid "63f77cc8-358a-422c-bb24-6991e1addeae", :page 25, :position {:bounding {:x1 139.9901580810547, :y1 442.40625, :x2 200.37281799316406, :y2 458.40625, :width 700, :height 840}, :rects ({:x1 139.9901580810547, :y1 442.40625, :x2 200.37281799316406, :y2 458.40625, :width 700, :height 840}), :page 25}, :content {:text "Search: S"}, :properties {:color "yellow"}} {:id #uuid "63f77cc9-509e-45ab-bbdb-0a082044d14c", :page 25, :position {:bounding {:x1 133.703125, :y1 520.59375, :x2 178.47666931152344, :y2 536.59375, :width 700, :height 840}, :rects ({:x1 133.703125, :y1 520.59375, :x2 178.47666931152344, :y2 536.59375, :width 700, :height 840}), :page 25}, :content {:text " Insert:"}, :properties {:color "yellow"}} {:id #uuid "63f77ccb-5b0a-4f33-843f-3cac32c39de8", :page 25, :position {:bounding {:x1 133.703125, :y1 598.78125, :x2 185.234375, :y2 614.78125, :width 700, :height 840}, :rects ({:x1 133.703125, :y1 598.78125, :x2 185.234375, :y2 614.78125, :width 700, :height 840}), :page 25}, :content {:text " Delete: "}, :properties {:color "yellow"}} {:id #uuid "63f77ce5-05d0-4f57-8d12-30358e075c37", :page 25, :position {:bounding {:x1 0, :y1 142, :x2 583.319091796875, :y2 415.421875, :width 700, :height 840}, :rects ({:x1 0, :y1 142, :x2 0, :y2 162, :width 700, :height 840} {:x1 264.4007568359375, :y1 381.8125, :x2 583.319091796875, :y2 397.8125, :width 700, :height 840} {:x1 140, :y1 399.421875, :x2 239.96615600585938, :y2 415.421875, :width 700, :height 840}), :page 25}, :content {:text "With an array, this means looking up a value at a particular index."}, :properties {:color "yellow"}} {:id #uuid "63f77ced-61b6-4649-845b-099e23f09153", :page 25, :position {:bounding {:x1 0, :y1 206, :x2 583.3333282470703, :y2 493.609375, :width 700, :height 840}, :rects ({:x1 0, :y1 206, :x2 0, :y2 226, :width 700, :height 840} {:x1 204.7442169189453, :y1 460, :x2 583.3333282470703, :y2 476, :width 700, :height 840} {:x1 140, :y1 477.609375, :x2 445.8140563964844, :y2 493.609375, :width 700, :height 840}), :page 25}, :content {:text "With an array, this means looking to see if a particular value exists within the array, and if so, at which index."}, :properties {:color "yellow"}} {:id #uuid "63f77cf8-ef91-46a9-a94c-6ed19ec7e7e2", :page 25, :position {:bounding {:x1 0, :y1 254, :x2 583.3411254882812, :y2 571.796875, :width 700, :height 840}, :rects ({:x1 0, :y1 254, :x2 0, :y2 274, :width 700, :height 840} {:x1 0, :y1 270, :x2 0, :y2 290, :width 700, :height 840} {:x1 553.9856567382812, :y1 520.59375, :x2 583.3258056640625, :y2 536.59375, :width 700, :height 840} {:x1 140, :y1 538.203125, :x2 583.3411254882812, :y2 554.203125, :width 700, :height 840} {:x1 140, :y1 555.796875, :x2 174.361328125, :y2 571.796875, :width 700, :height 840}), :page 25}, :content {:text "With an array, this means adding a new value to an additional slot within the array."}, :properties {:color "yellow"}} {:id #uuid "63f77d09-fe7f-4b1e-a41a-3ce67a90cc59", :page 25, :position {:bounding {:x1 0, :y1 318, :x2 583.3207397460938, :y2 632.390625, :width 700, :height 840}, :rects ({:x1 0, :y1 318, :x2 0, :y2 338, :width 700, :height 840} {:x1 554.0164794921875, :y1 598.78125, :x2 583.3207397460938, :y2 614.78125, :width 700, :height 840} {:x1 140, :y1 616.390625, :x2 552.1566162109375, :y2 632.390625, :width 700, :height 840}), :page 25}, :content {:text "With an array, this means removing one of the values from the array"}, :properties {:color "yellow"}} {:id #uuid "63f77d11-414a-4087-8900-208a61486993", :page 25, :position {:bounding {:x1 116.65625, :y1 721.75, :x2 262.8395690917969, :y2 743.75, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 721.75, :x2 262.8395690917969, :y2 743.75, :width 700, :height 840}), :page 25}, :content {:text "Measuring Speed"}, :properties {:color "yellow"}} {:id #uuid "63f77d23-2ddc-44da-ba89-6f7c184df472", :page 26, :position {:bounding {:x1 272.5843200683594, :y1 105.625, :x2 496.4012145996094, :y2 121.625, :width 700, :height 840}, :rects ({:x1 272.5843200683594, :y1 105.625, :x2 496.4012145996094, :y2 121.625, :width 700, :height 840}), :page 26}, :content {:text " instead in how many steps it takes."}, :properties {:color "yellow"}} {:id #uuid "63f77d29-2b63-4499-832b-b5c89230fe80", :page 26, :position {:bounding {:x1 0, :y1 -2, :x2 583.3566284179688, :y2 104.03125, :width 700, :height 840}, :rects ({:x1 0, :y1 -2, :x2 0, :y2 18, :width 700, :height 840} {:x1 471.3485412597656, :y1 70.421875, :x2 583.3566284179688, :y2 86.421875, :width 700, :height 840} {:x1 116.65625, :y1 88.03125, :x2 298.2061767578125, :y2 104.03125, :width 700, :height 840}), :page 26}, :content {:text " when we measure how “fast” an operation takes,"}, :properties {:color "yellow"}} {:id #uuid "63f77d4b-c88f-4342-848e-777408c794bc", :page 26, :position {:bounding {:x1 0, :y1 174, :x2 583.3203125, :y2 321, :width 700, :height 840}, :rects ({:x1 0, :y1 174, :x2 0, :y2 194, :width 700, :height 840} {:x1 301.37744140625, :y1 287.390625, :x2 583.3203125, :y2 303.390625, :width 700, :height 840} {:x1 116.65625, :y1 305, :x2 253.91114807128906, :y2 321, :width 700, :height 840}), :page 26}, :content {:text "Measuring the speed of an operation in terms of time is undependabl"}, :properties {:color "red"}} {:id #uuid "63f77d4d-0bcd-40ff-9712-85ee0f21ae31", :page 26, :position {:bounding {:x1 0, :y1 190, :x2 583.3229370117188, :y2 338.609375, :width 700, :height 840}, :rects ({:x1 0, :y1 190, :x2 0, :y2 210, :width 700, :height 840} {:x1 306.7015075683594, :y1 305, :x2 583.3229370117188, :y2 321, :width 700, :height 840} {:x1 116.65625, :y1 322.609375, :x2 251.4503173828125, :y2 338.609375, :width 700, :height 840}), :page 26}, :content {:text "the time will always change depending on the hardware it is run on."}, :properties {:color "red"}} {:id #uuid "63f77d51-9e32-4e17-baec-c73223814ee0", :page 26, :position {:bounding {:x1 116.65625, :y1 191.59375, :x2 433.7815246582031, :y2 207.59375, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 191.59375, :x2 433.7815246582031, :y2 207.59375, :width 700, :height 840}), :page 26}, :content {:text "Why do we measure code’s speed in terms of steps?"}, :properties {:color "red"}} {:id #uuid "63f77d6e-9285-48c6-8b39-0da2dfea4762", :page 26, :position {:bounding {:x1 0, :y1 318, :x2 583.3223876953125, :y2 512.59375, :width 700, :height 840}, :rects ({:x1 0, :y1 318, :x2 0, :y2 338, :width 700, :height 840} {:x1 0, :y1 334, :x2 0, :y2 354, :width 700, :height 840} {:x1 441.44976806640625, :y1 461.390625, :x2 583.3223876953125, :y2 477.390625, :width 700, :height 840} {:x1 116.65625, :y1 478.984375, :x2 583.3222045898438, :y2 494.984375, :width 700, :height 840} {:x1 116.65625, :y1 496.59375, :x2 366.88031005859375, :y2 512.59375, :width 700, :height 840}), :page 26}, :content {:text "speed, time complexity, efficiency, performance, and runtime interchangeably. They all refer to the number of steps a given operation takes."}, :properties {:color "green"}} {:id #uuid "63f77d78-9907-4a61-ade7-6ee36c974a43", :page 26, :position {:bounding {:x1 116.65625, :y1 566.75, :x2 186.17013549804688, :y2 588.75, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 566.75, :x2 186.17013549804688, :y2 588.75, :width 700, :height 840}), :page 26}, :content {:text "Reading"}, :properties {:color "blue"}} {:id #uuid "63f77d8c-b4c4-4edd-bd3a-189edae13464", :page 26, :position {:bounding {:x1 0, :y1 494, :x2 583.3385009765625, :y2 728.0625, :width 700, :height 840}, :rects ({:x1 0, :y1 494, :x2 0, :y2 514, :width 700, :height 840} {:x1 261.89373779296875, :y1 694.453125, :x2 583.3385009765625, :y2 710.453125, :width 700, :height 840} {:x1 116.65625, :y1 712.0625, :x2 340.015625, :y2 728.0625, :width 700, :height 840}), :page 26}, :content {:text " the computer would jump right to index 2 and report that it contains the value \"cucumbers\"."}, :properties {:color "blue"}} {:id #uuid "63f77dc3-cddc-43ab-a9d8-9676e7abcdda", :page 27, :position {:bounding {:x1 0, :y1 78, :x2 583.3164596557617, :y2 472.9696044921875, :width 700, :height 840}, :rects ({:x1 0, :y1 78, :x2 0, :y2 98, :width 700, :height 840} {:x1 116.65496063232422, :y1 439.3619079589844, :x2 583.3164596557617, :y2 455.3619079589844, :width 700, :height 840} {:x1 116.65333557128906, :y1 456.9695739746094, :x2 293.660400390625, :y2 472.9696044921875, :width 700, :height 840}), :page 27}, :content {:text "When a program declares an array, it allocates a contiguous set of empty cells for use in the program. "}, :properties {:color "blue"}} {:id #uuid "63f77dce-a75b-40d5-9ba8-e3b37b601038", :page 28, :position {:bounding {:x1 116.65625, :y1 70.421875, :x2 516.9271850585938, :y2 86.421875, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 70.421875, :x2 516.9271850585938, :y2 86.421875, :width 700, :height 840}), :page 28}, :content {:text "Now, every cell in a computer’s memory has a specific address."}, :properties {:color "blue"}} {:id #uuid "63f77de7-d86d-4c14-b111-71315255a20f", :page 28, :position {:bounding {:x1 0, :y1 94, :x2 583.3255004882812, :y2 646.328125, :width 700, :height 840}, :rects ({:x1 0, :y1 94, :x2 0, :y2 114, :width 700, :height 840} {:x1 0, :y1 110, :x2 0, :y2 130, :width 700, :height 840} {:x1 542.9312133789062, :y1 595.109375, :x2 583.3151245117188, :y2 611.109375, :width 700, :height 840} {:x1 116.65625, :y1 612.71875, :x2 583.3255004882812, :y2 628.71875, :width 700, :height 840} {:x1 116.65625, :y1 630.328125, :x2 225.29624938964844, :y2 646.328125, :width 700, :height 840}), :page 28}, :content {:text " it can jump straight to that index because of the combination of the following facts about computers:"}, :properties {:color "blue"}} {:id #uuid "63f77dfd-b173-4855-a101-641e79dc34a9", :page 28, :position {:bounding {:x1 116.65625, :y1 655.703125, :x2 498.8652648925781, :y2 671.703125, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 655.703125, :x2 498.8652648925781, :y2 671.703125, :width 700, :height 840}), :page 28}, :content {:text "1. A computer can jump to any memory address in one step."}, :properties {:color "blue"}} {:id #uuid "63f77e05-40d1-47c2-be75-62c5bef64b9a", :page 29, :position {:bounding {:x1 0, :y1 -2, :x2 583.33203125, :y2 104.03125, :width 700, :height 840}, :rects ({:x1 0, :y1 -2, :x2 0, :y2 18, :width 700, :height 840} {:x1 116.65625, :y1 70.421875, :x2 583.33203125, :y2 86.421875, :width 700, :height 840} {:x1 140, :y1 88.03125, :x2 356.64544677734375, :y2 104.03125, :width 700, :height 840}), :page 29}, :content {:text "2. Whenever a computer allocates an array, it also makes note at which memory address the array begins. "}, :properties {:color "blue"}} {:id #uuid "63f77e20-6915-4135-9087-1d7c753341d5", :page 29, :position {:bounding {:x1 0, :y1 110, :x2 583.337158203125, :y2 235.03125, :width 700, :height 840}, :rects ({:x1 0, :y1 110, :x2 0, :y2 130, :width 700, :height 840} {:x1 169.32904052734375, :y1 201.421875, :x2 583.337158203125, :y2 217.421875, :width 700, :height 840} {:x1 116.65625, :y1 219.03125, :x2 154.66201782226562, :y2 235.03125, :width 700, :height 840}), :page 29}, :content {:text "the computer would simply take the memory address at index 0 and add 3."}, :properties {:color "blue"}} {:id #uuid "63f77e4e-107f-41e9-a5f9-8592d5ab0a86", :page 29, :position {:bounding {:x1 116.65625, :y1 426.171875, :x2 458.59918212890625, :y2 442.171875, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 426.171875, :x2 458.59918212890625, :y2 442.171875, :width 700, :height 840}), :page 29}, :content {:text "Reading from an array is, therefore, an efficient operation"}, :properties {:color "blue"}} {:id #uuid "63f77e53-63b9-498f-a1c1-4f858dcb829f", :page 29, :position {:bounding {:x1 0, :y1 286, :x2 583.4188232421875, :y2 459.78125, :width 700, :height 840}, :rects ({:x1 0, :y1 286, :x2 0, :y2 306, :width 700, :height 840} {:x1 515.2400512695312, :y1 426.171875, :x2 583.4188232421875, :y2 442.171875, :width 700, :height 840} {:x1 116.65625, :y1 443.78125, :x2 521.459228515625, :y2 459.78125, :width 700, :height 840}), :page 29}, :content {:text "e computer can read any index by jumping to any memory address in one step"}, :properties {:color "blue"}} {:id #uuid "63f77e77-c937-4a5d-be0f-4049701093a1", :page 29, :position {:bounding {:x1 116.65625, :y1 662.53125, :x2 200.67568969726562, :y2 684.53125, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 662.53125, :x2 200.67568969726562, :y2 684.53125, :width 700, :height 840}), :page 29}, :content {:text "Searching"}, :properties {:color "purple"}} {:id #uuid "63f77e90-4eb6-4c65-a30f-35ae93a29d03", :page 29, :position {:bounding {:x1 0, :y1 494, :x2 583.329833984375, :y2 728.0625, :width 700, :height 840}, :rects ({:x1 0, :y1 494, :x2 0, :y2 514, :width 700, :height 840} {:x1 261.484375, :y1 694.453125, :x2 583.329833984375, :y2 710.453125, :width 700, :height 840} {:x1 116.65625, :y1 712.0625, :x2 408.2271728515625, :y2 728.0625, :width 700, :height 840}), :page 29}, :content {:text "searching an array means looking to see whether a particular value exists within an array and if so"}, :properties {:color "purple"}} {:id #uuid "63f77e94-ccc2-40a7-b452-cee1adc5300f", :page 29, :position {:bounding {:x1 477.2834167480469, :y1 712.0625, :x2 581.1405639648438, :y2 728.0625, :width 700, :height 840}, :rects ({:x1 477.2834167480469, :y1 712.0625, :x2 581.1405639648438, :y2 728.0625, :width 700, :height 840}), :page 29}, :content {:text "ndex it’s located."}, :properties {:color "purple"}} {:id #uuid "63f77eb4-89d0-4429-be10-adc82d6425d2", :page 30, :position {:bounding {:x1 0, :y1 78, :x2 583.3307037353516, :y2 199.8125, :width 700, :height 840}, :rects ({:x1 0, :y1 78, :x2 0, :y2 98, :width 700, :height 840} {:x1 155.7217559814453, :y1 166.21875, :x2 583.3307037353516, :y2 182.21875, :width 700, :height 840} {:x1 116.65625, :y1 183.8125, :x2 245.41476440429688, :y2 199.8125, :width 700, :height 840}), :page 30}, :content {:text "Searching, though, is tedious, since the computer has no way to jump to a particular value."}, :properties {:color "purple"}} {:id #uuid "63f77ee1-0d1d-4f51-9712-7d00edc01a4e", :page 30, :position {:bounding {:x1 0, :y1 126, :x2 583.3171997070312, :y2 260.40625, :width 700, :height 840}, :rects ({:x1 0, :y1 126, :x2 0, :y2 146, :width 700, :height 840} {:x1 343.7543029785156, :y1 226.8125, :x2 583.3171997070312, :y2 242.8125, :width 700, :height 840} {:x1 116.65625, :y1 244.40625, :x2 335.44512939453125, :y2 260.40625, :width 700, :height 840}), :page 30}, :content {:text "it has no idea offhand what values are contained at each memory address."}, :properties {:color "purple"}} {:id #uuid "63f77f3d-9501-40f1-bad6-3aa8a69d7675", :page 32, :position {:bounding {:x1 0, :y1 94, :x2 583.3358764648438, :y2 225.203125, :width 700, :height 840}, :rects ({:x1 0, :y1 94, :x2 0, :y2 114, :width 700, :height 840} {:x1 318.0317077636719, :y1 191.59375, :x2 583.3358764648438, :y2 207.59375, :width 700, :height 840} {:x1 116.65625, :y1 209.203125, :x2 289.09564208984375, :y2 225.203125, :width 700, :height 840}), :page 32}, :content {:text "t for N cells in an array, linear search would take a maximum of N steps"}, :properties {:color "purple"}} {:id #uuid "63f77f5d-a673-4a00-81de-ff1c9b6b2ff5", :page 32, :position {:bounding {:x1 0, :y1 254, :x2 583.3984375, :y2 448.453125, :width 700, :height 840}, :rects ({:x1 0, :y1 254, :x2 0, :y2 274, :width 700, :height 840} {:x1 474.0244140625, :y1 414.84375, :x2 583.3984375, :y2 430.84375, :width 700, :height 840} {:x1 116.65625, :y1 432.453125, :x2 236.86439514160156, :y2 448.453125, :width 700, :height 840}), :page 32}, :content {:text " Such an insertion takes just one step."}, :properties {:color "yellow"}} {:id #uuid "63f77f68-6363-4e4b-8b8f-27fbe2160181", :page 32, :position {:bounding {:x1 0, :y1 286, :x2 583.3203125, :y2 491.4375, :width 700, :height 840}, :rects ({:x1 0, :y1 286, :x2 0, :y2 306, :width 700, :height 840} {:x1 423.04083251953125, :y1 457.828125, :x2 583.3203125, :y2 473.828125, :width 700, :height 840} {:x1 116.65625, :y1 475.4375, :x2 431.1900939941406, :y2 491.4375, :width 700, :height 840}), :page 32}, :content {:text " when allocating an array, the computer always keeps track of the array’s size"}, :properties {:color "yellow"}} {:id #uuid "63f77fa5-8733-4c35-9d95-cdef3ce72bb9", :page 33, :position {:bounding {:x1 0, :y1 78, :x2 583.3168334960938, :y2 199.8125, :width 700, :height 840}, :rects ({:x1 0, :y1 78, :x2 0, :y2 98, :width 700, :height 840} {:x1 453.7593994140625, :y1 166.21875, :x2 583.3168334960938, :y2 182.21875, :width 700, :height 840} {:x1 116.65625, :y1 183.8125, :x2 562.9686889648438, :y2 199.8125, :width 700, :height 840}), :page 33}, :content {:text "nserting a new piece of data at the beginning or in the middle of an array is a different story"}, :properties {:color "red"}} {:id #uuid "63f77fb4-34a7-4ee5-8abf-57f067328b2a", :page 33, :position {:bounding {:x1 0, :y1 94, :x2 583.31640625, :y2 235.03125, :width 700, :height 840}, :rects ({:x1 0, :y1 94, :x2 0, :y2 114, :width 700, :height 840} {:x1 0, :y1 110, :x2 0, :y2 130, :width 700, :height 840} {:x1 567.4904174804688, :y1 183.8125, :x2 583.31640625, :y2 199.8125, :width 700, :height 840} {:x1 116.65625, :y1 201.421875, :x2 583.3054809570312, :y2 217.421875, :width 700, :height 840} {:x1 116.65625, :y1 219.03125, :x2 345.0014343261719, :y2 235.03125, :width 700, :height 840}), :page 33}, :content {:text " In these cases, we need to shift pieces of data to make room for what we’re inserting, leading to additional steps."}, :properties {:color "red"}} {:id #uuid "63f77fef-d119-4d40-a024-f0b670b5b2e4", :page 34, :position {:bounding {:x1 116.65625, :y1 441.140625, :x2 262.6373291015625, :y2 457.140625, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 441.140625, :x2 262.6373291015625, :y2 457.140625, :width 700, :height 840}), :page 34}, :content {:text "The worst-case scenari"}, :properties {:color "red"}} {:id #uuid "63f77ff7-9380-4741-9909-109dfe7ae11f", :page 34, :position {:bounding {:x1 0, :y1 78, :x2 583.3265991210938, :y2 474.734375, :width 700, :height 840}, :rects ({:x1 0, :y1 78, :x2 0, :y2 98, :width 700, :height 840} {:x1 486.5013427734375, :y1 441.140625, :x2 583.3265991210938, :y2 457.140625, :width 700, :height 840} {:x1 116.65625, :y1 458.734375, :x2 337.3377380371094, :y2 474.734375, :width 700, :height 840}), :page 34}, :content {:text " the scenario in which insertion takes the most steps"}, :properties {:color "red"}} {:id #uuid "63f7800b-5f99-4280-87c2-9463f77c8755", :page 34, :position {:bounding {:x1 0, :y1 94, :x2 583.3849487304688, :y2 492.34375, :width 700, :height 840}, :rects ({:x1 0, :y1 94, :x2 0, :y2 114, :width 700, :height 840} {:x1 416.1228942871094, :y1 458.734375, :x2 583.3849487304688, :y2 474.734375, :width 700, :height 840} {:x1 116.65625, :y1 476.34375, :x2 193.36900329589844, :y2 492.34375, :width 700, :height 840}), :page 34}, :content {:text " insert data at the beginning of the array. "}, :properties {:color "red"}} {:id #uuid "63f78011-26f3-43c5-b1b6-1871bac290e3", :page 34, :position {:bounding {:x1 0, :y1 110, :x2 583.3255004882812, :y2 509.9375, :width 700, :height 840}, :rects ({:x1 0, :y1 110, :x2 0, :y2 130, :width 700, :height 840} {:x1 562.0164184570312, :y1 476.34375, :x2 583.3255004882812, :y2 492.34375, :width 700, :height 840} {:x1 116.65625, :y1 493.9375, :x2 446.3489685058594, :y2 509.9375, :width 700, :height 840}), :page 34}, :content {:text " we have to move all the other values one cell to the right."}, :properties {:color "red"}} {:id #uuid "63f7900d-c05a-4151-a314-8df8b10d535d", :page 35, :position {:bounding {:x1 0, :y1 174, :x2 583.3358764648438, :y2 707.46875, :width 700, :height 840}, :rects ({:x1 0, :y1 174, :x2 0, :y2 194, :width 700, :height 840} {:x1 0, :y1 190, :x2 0, :y2 210, :width 700, :height 840} {:x1 116.65625, :y1 656.265625, :x2 583.3345947265625, :y2 672.265625, :width 700, :height 840} {:x1 116.65625, :y1 673.875, :x2 583.3358764648438, :y2 689.875, :width 700, :height 840} {:x1 116.65625, :y1 691.46875, :x2 569.8218383789062, :y2 707.46875, :width 700, :height 840}), :page 35}, :content {:text "Like insertion, the worst-case scenario of deleting an element is deleting the very first element of the array. This is because index 0 would become empty, and we’d have to shift all the remaining elements to the left to fill the gap."}, :properties {:color "red"}} {:id #uuid "63f7911c-f361-4cbf-9245-09815d2ba7ab", :page 22, :position {:bounding {:x1 272.921875, :y1 212.5625, :x2 583.3211059570312, :y2 256.5625, :width 700, :height 840}, :rects ({:x1 272.921875, :y1 212.5625, :x2 583.3211059570312, :y2 256.5625, :width 700, :height 840}), :page 22}, :content {:text "Why Data Structures Matter"}, :properties {:color "yellow"}} {:id #uuid "63f7933f-90a8-4f16-b0f1-1a3cfd21184f", :page 26, :position {:bounding {:x1 116.65625, :y1 641.640625, :x2 455.1207580566406, :y2 657.640625, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 641.640625, :x2 455.1207580566406, :y2 657.640625, :width 700, :height 840}), :page 26}, :content {:text "A computer can read from an array in just one step. "}, :properties {:color "yellow"}} {:id #uuid "63f79ab0-7249-45bf-a0dc-8884f7ec54a6", :page 36, :position {:bounding {:x1 116.65625, :y1 271.578125, :x2 485.0272216796875, :y2 293.578125, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 271.578125, :x2 485.0272216796875, :y2 293.578125, :width 700, :height 840}), :page 36}, :content {:text "Sets: How a Single Rule Can Affect Efficiency"}, :properties {:color "yellow"}} {:id #uuid "63f79ab8-c6f0-4efd-8dbe-c880cd3e9938", :page 36, :position {:bounding {:x1 0, :y1 174, :x2 581.1069946289062, :y2 337.09375, :width 700, :height 840}, :rects ({:x1 0, :y1 174, :x2 0, :y2 194, :width 700, :height 840} {:x1 396.2299499511719, :y1 303.5, :x2 581.1069946289062, :y2 319.5, :width 700, :height 840} {:x1 116.65625, :y1 321.09375, :x2 466.46697998046875, :y2 337.09375, :width 700, :height 840}), :page 36}, :content {:text " A set is a data structure that does not allow duplicate values to be contained within it."}, :properties {:color "yellow"}} {:id #uuid "63f79ad2-0fa1-4613-b164-2c0ac85bf7b3", :page 36, :position {:bounding {:x1 116.65625, :y1 467.65625, :x2 583.32421875, :y2 483.65625, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 467.65625, :x2 583.32421875, :y2 483.65625, :width 700, :height 840}), :page 36}, :content {:text "Sets are useful when you need to ensure that you don’t have duplicate data."}, :properties {:color "yellow"}} {:id #uuid "63f79b5f-ce9e-463f-ae9e-01a6968ad1e6", :page 37, :position {:bounding {:x1 116.65625, :y1 113.40625, :x2 499.232177734375, :y2 129.40625, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 113.40625, :x2 499.232177734375, :y2 129.40625, :width 700, :height 840}), :page 37}, :content {:text "Reading from a set is exactly the same as reading from an array"}, :properties {:color "yellow"}} {:id #uuid "63f79b68-6288-4591-bcce-f02fea8528c1", :page 37, :position {:bounding {:x1 116.65625, :y1 191.59375, :x2 562.2088623046875, :y2 207.59375, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 191.59375, :x2 562.2088623046875, :y2 207.59375, :width 700, :height 840}), :page 37}, :content {:text "Searching a set also turns out to be no different than searching an array"}, :properties {:color "yellow"}} {:id #uuid "63f79b6c-ba45-4668-b10c-6f3b1f4b1ef3", :page 37, :position {:bounding {:x1 116.65625, :y1 269.796875, :x2 182.76844787597656, :y2 285.796875, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 269.796875, :x2 182.76844787597656, :y2 285.796875, :width 700, :height 840}), :page 37}, :content {:text "Insertion, "}, :properties {:color "yellow"}} {:id #uuid "63f79b88-83ae-4651-87cf-30232b4e3211", :page 37, :position {:bounding {:x1 0, :y1 222, :x2 583.3275146484375, :y2 399.1875, :width 700, :height 840}, :rects ({:x1 0, :y1 222, :x2 0, :y2 242, :width 700, :height 840} {:x1 0, :y1 238, :x2 0, :y2 258, :width 700, :height 840} {:x1 116.65625, :y1 347.984375, :x2 583.3203125, :y2 363.984375, :width 700, :height 840} {:x1 116.65625, :y1 365.59375, :x2 583.3275146484375, :y2 381.59375, :width 700, :height 840} {:x1 116.65625, :y1 383.1875, :x2 395.5492248535156, :y2 399.1875, :width 700, :height 840}), :page 37}, :content {:text "With a set, however, the computer first needs to determine that this value doesn’t already exist in this set—because that’s what sets do: they prevent duplicate data from being inserted into them."}, :properties {:color "yellow"}} {:id #uuid "63f79b92-1254-443b-b932-ebd04e79d6a7", :page 37, :position {:bounding {:x1 116.65625, :y1 287.390625, :x2 343.01031494140625, :y2 303.390625, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 287.390625, :x2 343.01031494140625, :y2 303.390625, :width 700, :height 840}), :page 37}, :content {:text "inserting a value at the end of a set,"}, :properties {:color "yellow"}} {:id #uuid "63f79bba-39ef-4c23-84d6-c2f6bd69db33", :page 37, :position {:bounding {:x1 142.11532592773438, :y1 521.96875, :x2 431.51873779296875, :y2 537.96875, :width 700, :height 840}, :rects ({:x1 142.11532592773438, :y1 521.96875, :x2 431.51873779296875, :y2 537.96875, :width 700, :height 840}), :page 37}, :content {:text "every insertion into a set first requires a search."}, :properties {:color "yellow"}} {:id #uuid "63f79c04-28c5-441d-9ea0-85f8d4f6fcd1", :page 39, :position {:bounding {:x1 0, :y1 14, :x2 583.3385009765625, :y2 253.5, :width 700, :height 840}, :rects ({:x1 0, :y1 14, :x2 0, :y2 34, :width 700, :height 840} {:x1 116.65625, :y1 219.90625, :x2 583.3385009765625, :y2 235.90625, :width 700, :height 840} {:x1 116.65625, :y1 237.5, :x2 511.276611328125, :y2 253.5, :width 700, :height 840}), :page 39}, :content {:text "Inserting a value at the end of a set is the best-case scenario, but we still had to perform six steps for a set originally containing five elements."}, :properties {:color "yellow"}} {:id #uuid "63f79c1a-8d73-4c86-8511-8a69d9075942", :page 39, :position {:bounding {:x1 395.3583984375, :y1 280.5, :x2 544.431640625, :y2 296.5, :width 700, :height 840}, :rects ({:x1 395.3583984375, :y1 280.5, :x2 544.431640625, :y2 296.5, :width 700, :height 840}), :page 39}, :content {:text "set will take up to N + 1"}, :properties {:color "yellow"}} {:id #uuid "63f79c53-2704-4e9d-9fc3-7e69253abe70", :page 39, :position {:bounding {:x1 0, :y1 110, :x2 583.3112945556641, :y2 366.90625, :width 700, :height 840}, :rects ({:x1 0, :y1 110, :x2 0, :y2 130, :width 700, :height 840} {:x1 181.06141662597656, :y1 333.296875, :x2 583.3112945556641, :y2 349.296875, :width 700, :height 840} {:x1 116.65625, :y1 350.90625, :x2 307.0277404785156, :y2 366.90625, :width 700, :height 840}), :page 39}, :content {:text "Contrast this with the regular array, in which such an insertion takes a grand total of one step."}, :properties {:color "purple"}} {:id #uuid "63f79c5d-5f29-45d6-b73e-90cb03c072e4", :page 39, :position {:bounding {:x1 0, :y1 142, :x2 583.315185546875, :y2 409.890625, :width 700, :height 840}, :rects ({:x1 0, :y1 142, :x2 0, :y2 162, :width 700, :height 840} {:x1 116.65625, :y1 376.28125, :x2 583.315185546875, :y2 392.28125, :width 700, :height 840} {:x1 116.65625, :y1 393.890625, :x2 148.28207397460938, :y2 409.890625, :width 700, :height 840}), :page 39}, :content {:text "In the worst-case scenario, where we’re inserting a value at the beginning of a set"}, :properties {:color "red"}} {:id #uuid "63f79c61-576e-4288-b103-7b9c5c1fe69b", :page 39, :position {:bounding {:x1 239.88787841796875, :y1 393.890625, :x2 393.65478515625, :y2 409.890625, :width 700, :height 840}, :rects ({:x1 239.88787841796875, :y1 393.890625, :x2 393.65478515625, :y2 409.890625, :width 700, :height 840}), :page 39}, :content {:text " needs to search N cells"}, :properties {:color "red"}} {:id #uuid "63f79c75-8c60-4c4d-9894-a0e23c363cda", :page 39, :position {:bounding {:x1 0, :y1 174, :x2 583.307373046875, :y2 445.09375, :width 700, :height 840}, :rects ({:x1 0, :y1 174, :x2 0, :y2 194, :width 700, :height 840} {:x1 281.2925109863281, :y1 411.5, :x2 583.307373046875, :y2 427.5, :width 700, :height 840} {:x1 116.65625, :y1 429.09375, :x2 404.9002685546875, :y2 445.09375, :width 700, :height 840}), :page 39}, :content {:text " another N steps to shift all the data to the right, and another final step to insert the new value. "}, :properties {:color "red"}} {:id #uuid "63f79c7a-568e-4373-8bd8-6bd07949735b", :page 39, :position {:bounding {:x1 453.4173278808594, :y1 429.09375, :x2 579.1989135742188, :y2 445.09375, :width 700, :height 840}, :rects ({:x1 453.4173278808594, :y1 429.09375, :x2 579.1989135742188, :y2 445.09375, :width 700, :height 840}), :page 39}, :content {:text " total of 2N + 1 steps"}, :properties {:color "red"}} {:id #uuid "63f79c8c-c7e9-43ac-9f1a-add3f6b7bf91", :page 39, :position {:bounding {:x1 0, :y1 206, :x2 583.3203125, :y2 480.3125, :width 700, :height 840}, :rects ({:x1 0, :y1 206, :x2 0, :y2 226, :width 700, :height 840} {:x1 116.65625, :y1 446.703125, :x2 583.3203125, :y2 462.703125, :width 700, :height 840} {:x1 116.65625, :y1 464.3125, :x2 226.55364990234375, :y2 480.3125, :width 700, :height 840}), :page 39}, :content {:text "Contrast this to insertion into the beginning of a regular array, which only takes N + 1 steps."}, :properties {:color "green"}} {:id #uuid "63f79ce0-a4d8-4e58-88d8-fd053f583baf", :page 39, :position {:bounding {:x1 0, :y1 318, :x2 583.3229370117188, :y2 611.3125, :width 700, :height 840}, :rects ({:x1 0, :y1 318, :x2 0, :y2 338, :width 700, :height 840} {:x1 151.81607055664062, :y1 577.703125, :x2 583.3229370117188, :y2 593.703125, :width 700, :height 840} {:x1 116.65625, :y1 595.3125, :x2 291.4358825683594, :y2 611.3125, :width 700, :height 840}), :page 39}, :content {:text "You must analyze the needs of your own application and decide which data structure is a better fit."}, :properties {:color "green"}} {:id #uuid "63f7a74f-d0c3-4d0c-a571-84c127a2748a", :page 40, :position {:bounding {:x1 116.65625, :y1 150.390625, :x2 193.18959045410156, :y2 172.390625, :width 700, :height 840}, :rects ({:x1 116.65625, :y1 150.390625, :x2 193.18959045410156, :y2 172.390625, :width 700, :height 840}), :page 40}, :content {:text "Exercises"}, :properties {:color "green"}}], :extra {:page 40}}